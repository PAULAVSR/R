graphics.off()
# 2a
cumex <- function(n, dmax) {
if(dmax == 0) {
matrix(rep(0, n), ncol=n)
}
else {
if(n == 1) {
matrix(0:dmax, nrow = dmax+1)
} else {
mat <- cumex(n-1, dmax)
mat <- apply(mat, 2, FUN=function(x) rep(x, each=dmax+1))
mat <- cbind(mat, 0:dmax)
matrix(mat[rowSums(mat) <= dmax,], ncol=n)
}
}
}
# 2b
polyterms.RHS <- function(n, dmax, vname) {
paste(apply(cumex(n, dmax), 1, FUN=function(x) str <- paste("I(",paste(vname,"^",x,sep="",collapse = "*"),collapse = "+",")")),collapse = "+")
}
# 2c
QMK <- function(x, dmax) {
stopifnot(is.data.frame(x))
stopifnot(is.factor(x[[ncol(x)]]))
stopifnot(dmax >= 0)
classes <- levels(x[[ncol(x)]])
label <- names(x)[[ncol(x)]]
xs <- x[,-ncol(x)]
vname <- names(xs)
funs <- polyterms.RHS(ncol(xs), dmax, vname)
x[,ncol(x)] <- sapply(x[,ncol(x)], FUN=as.numeric) - 1
model <- lm(paste(label,paste("0+",funs), sep="~"), x)
## Since there are some singularities in the fitted lm models: some code to fix warnings
# if (length(model$coefficients[!is.na(model$coefficients)][-1]) != 0){
#   temp <- paste(names(model$coefficients[!is.na(model$coefficients)])[-1],collapse = "+")
#   model <- update(model,formula. = as.formula(paste(label,temp,sep = "~")))
# }
structure(.Data= list(model=model, classes=classes),class = "QMK")
}
# 2d
is.QMK <- function(o) inherits(o,"QMK")
predict.QMK <- function(o, newdata) {
stopifnot(is.data.frame(newdata))
stopifnot(is.QMK(o))
stopifnot(is.factor(newdata[[ncol(newdata)]])==F)
factor(ifelse(predict.lm(o$model, newdata) <= 0.5, o$classes[1], o$classes[2]), o$classes)
}
# 2e
dim.QMK <- function(o) {
stopifnot(is.QMK(o))
length(coefficients(o$model))
}
heldout.dim <- function(x, newdata, method=QMK, ...) {
o <- method(x, ...)
classes <- predict(o,newdata[,-ncol(newdata)])
c(dim(o),sum(ifelse(classes == newdata[,ncol(newdata)],0,1))/nrow(newdata))
}
## 2f
error.table <- function(x,newdata,modelset,...) {
sol <- sapply(modelset,function(i) heldout.dim(x,newdata,dmax=i),simplify = T,USE.NAMES = T)
sol <- rbind(sol,sapply(modelset,function(i) heldout.dim(x,x,dmax=i),simplify = T,USE.NAMES = T))[-3,]
rownames(sol) <- c("modelsize","lern:test","lern:lern")
colnames(sol) <- paste("Polynomgrad",modelset)
plot(sol[1,],sol[2,]*100,type = "b",xlim = range(sol[1,]),ylim = range(sol[2:3,])*100,col="tomato",log="x",pch=17,xlab = "Anzahl Polynomterme",ylab="Fehlerrate [%]", ...)
points(sol[1,],sol[3,]*100,type = "b",col="navyblue",pch=17,lty=2)
legend("bottomleft",legend = c("Testdaten","Lerndataen"),col = c("tomato","navyblue"),lty = c(1,2))
signif(sol,3)
}
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep = "")
names(links) <- dataset
data <- lapply(links,function(link) mget(load(url(link))))
data <- lapply(links,function(link) mget(load(link)))
data <- lapply(links,function(link) load(link))
links
data <- lapply(links,function(link) mget(load(paste(link))))
links
names(links) <- dataset
links
load(links[1])
links[1]
data <- lapply(links,function(link) get(load(link)))
getwd()
data <- lapply(links,function(link) print(link))
data <- lapply(links,function(link) load(link))
load(links[1])
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("https://www.minet.uni-jena.de/fakultaet/schukat/WMM/SS18/uebung/data/",dataset,".rda",sep = "")
links
names(links) <- dataset
links
data <- lapply(links,function(link) mget(load(url(link))))
is.matrix(links)
is.list(links)
is.vector(links)
links <- paste("../",dataset,".rda",sep = "")
data <- lapply(links,function(link) mget(load(url(link))))
data <- lapply(links,function(link) mget(load(link)))
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep = "")
is.vector(links)
links <- paste("../",dataset,".rda",sep = "")
links
names(links) <- dataset
links
dim(links)
row(links)
length(links)
links <- paste("https://www.minet.uni-jena.de/fakultaet/schukat/WMM/SS18/uebung/data/",dataset,".rda",sep = "")
length(links)
links <- paste("../",dataset,".rda",sep = "")
length(links)
links <- paste("../",dataset,".rda",sep = "")
data
data <- lapply(links,function(link) mget(load(link[1])))
data <- lapply(links,function(link) mget(scan(link)))
links <- paste("../",dataset,".rda",sep = "")
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep = "")
data <- lapply(links,function(link) mget(scan(link)))
scan(links[1])
links[1]
load(links[1])
mget(load(links[1]))
mget(load(links))
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep = "")
names(links) <- dataset
data <- lapply(links,function(link) mget(mget(mget(load(link)))))
data <- lapply(links,function(link) mget(mget(load(link))))
data <- lapply(links,function(link) mget(load(link)))
data <- lapply(links,sapply(1:length(links), function(link) mget(load(link)),simplify = F))
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep = "")
names(links) <- dataset
data <- lapply(links,sapply(1:length(links), function(link) mget(load(links[link])),simplify = F))
graphics.off()
# 2a
cumex <- function(n, dmax) {
if(dmax == 0) {
matrix(rep(0, n), ncol=n)
}
else {
if(n == 1) {
matrix(0:dmax, nrow = dmax+1)
} else {
mat <- cumex(n-1, dmax)
mat <- apply(mat, 2, FUN=function(x) rep(x, each=dmax+1))
mat <- cbind(mat, 0:dmax)
matrix(mat[rowSums(mat) <= dmax,], ncol=n)
}
}
}
# 2b
polyterms.RHS <- function(n, dmax, vname) {
paste(apply(cumex(n, dmax), 1, FUN=function(x) str <- paste("I(",paste(vname,"^",x,sep="",collapse = "*"),collapse = "+",")")),collapse = "+")
}
# 2c
QMK <- function(x, dmax) {
stopifnot(is.data.frame(x))
stopifnot(is.factor(x[[ncol(x)]]))
stopifnot(dmax >= 0)
classes <- levels(x[[ncol(x)]])
label <- names(x)[[ncol(x)]]
xs <- x[,-ncol(x)]
vname <- names(xs)
funs <- polyterms.RHS(ncol(xs), dmax, vname)
x[,ncol(x)] <- sapply(x[,ncol(x)], FUN=as.numeric) - 1
model <- lm(paste(label,paste("0+",funs), sep="~"), x)
## Since there are some singularities in the fitted lm models: some code to fix warnings
# if (length(model$coefficients[!is.na(model$coefficients)][-1]) != 0){
#   temp <- paste(names(model$coefficients[!is.na(model$coefficients)])[-1],collapse = "+")
#   model <- update(model,formula. = as.formula(paste(label,temp,sep = "~")))
# }
structure(.Data= list(model=model, classes=classes),class = "QMK")
}
# 2d
is.QMK <- function(o) inherits(o,"QMK")
predict.QMK <- function(o, newdata) {
stopifnot(is.data.frame(newdata))
stopifnot(is.QMK(o))
stopifnot(is.factor(newdata[[ncol(newdata)]])==F)
factor(ifelse(predict.lm(o$model, newdata) <= 0.5, o$classes[1], o$classes[2]), o$classes)
}
# 2e
dim.QMK <- function(o) {
stopifnot(is.QMK(o))
length(coefficients(o$model))
}
heldout.dim <- function(x, newdata, method=QMK, ...) {
o <- method(x, ...)
classes <- predict(o,newdata[,-ncol(newdata)])
c(dim(o),sum(ifelse(classes == newdata[,ncol(newdata)],0,1))/nrow(newdata))
}
## 2f
error.table <- function(x,newdata,modelset,...) {
sol <- sapply(modelset,function(i) heldout.dim(x,newdata,dmax=i),simplify = T,USE.NAMES = T)
sol <- rbind(sol,sapply(modelset,function(i) heldout.dim(x,x,dmax=i),simplify = T,USE.NAMES = T))[-3,]
rownames(sol) <- c("modelsize","lern:test","lern:lern")
colnames(sol) <- paste("Polynomgrad",modelset)
plot(sol[1,],sol[2,]*100,type = "b",xlim = range(sol[1,]),ylim = range(sol[2:3,])*100,col="tomato",log="x",pch=17,xlab = "Anzahl Polynomterme",ylab="Fehlerrate [%]", ...)
points(sol[1,],sol[3,]*100,type = "b",col="navyblue",pch=17,lty=2)
legend("bottomleft",legend = c("Testdaten","Lerndataen"),col = c("tomato","navyblue"),lty = c(1,2))
signif(sol,3)
}
length(links)
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("https://github.com/PAULAVSR/R/blob/master/Klasse%20f%C3%BCr%20Parzendichten%2C%20optimize()%2C%20Polynomklassifikator%2C%20formula-Klasse%20/",dataset,".rda",sep = "")
names(links) <- dataset
data <- lapply(links,function(link) mget(load(url(link))))
data
links
## 2g
if (require("RCurl") == F) {install.packages("RCurl")}
require("RCurl")
install.packages("RCurl", dependencies = FALSE)
## 2g
if (require("devtools") == F) {install.packages("RCurl")}
## 2g
if (require("repmis") == F) {install.packages("RCurl")}
## 2g
if (require("repmis") == F) {install.packages("repmis")}
require("repmis")
## 2g
if (require("devtools") == F) {install.packages("devtools")}
require("devtools")
names(links) <- dataset
dataset
as.list(links)
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
names(links) <- dataset
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep="")
names(links) <- dataset
as.list(links)
data <- lapply(links,function(link) mget(load(link)))
dim(links)
row(links)
str(links)
length(links)
for (i in 1:length(links)) {
junk <- mget(load(links[i]))
}
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep="")
names(links) <- dataset
for (i in 1:length(links)) {
junk <- mget(load(links[i]))
}
for (i in 1:length(links)) {
junk <- mget(load(links[1]))
}
for (i in 1:length(links)) {
junk <- load(links[i])
}
for (i in 1:length(links)) {
junk <- load(links[i])
getwd()
}
for (i in 1:length(1)) {
junk <- load(links[i])
getwd()
}
junk <- load(links[1])
getwd()
for (i in 1:length(links)) {
junk <- load(links[i])
setwd(getwd())
}
junk <- load(links[2])
junk <- load(links[3])
junk <- load(links[4])
## 2g
dataset <-c("heart","diabetes","australia","segment","vehicle")
links <- paste("../",dataset,".rda",sep = "")
names(links) <- dataset
data <- lapply(links,function(link) mget(load(link)))
data
error.table.caller <- function(i,name) {
sol <- error.table(as.data.frame(i[[1]]), as.data.frame(i[[2]]), 0:3, main=name)
rownames(sol) <- paste(rownames(sol),name)
sol
}
solution.raw <- do.call(rbind, mapply(data, dataset, FUN=function(i,n)error.table.caller(i,n), SIMPLIFY =F))
solution.raw
## 2h
x <- error.table(data$diabetes$diabetes.lern,data$diabetes$diabetes.lern,0:5,main="diabetes")
